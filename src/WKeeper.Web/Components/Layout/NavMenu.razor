@inject NavigationManager NavigationManager

<div class="navmenu">
    <input type="checkbox" title="Menu expand/collapse toggle" id="navmenu-toggle" class="navmenu-icon" />
    <label for="navmenu-toggle" class="navmenu-icon"><FluentIcon Value="@(new Icons.Regular.Size20.Navigation())" Color="Color.Fill" /></label>
    <nav class="sitenav" aria-labelledby="main-menu">
        <FluentNavMenu Id="main-menu" Collapsible="true" Width="250" Title="Navigation menu" @bind-Expanded="expanded" CustomToggle="true">
            <FluentNavLink Href="/" Match="NavLinkMatch.All" Icon="@(new Icons.Regular.Size20.Home())" IconColor="Color.Accent">Home</FluentNavLink>                      
            <AuthorizeView>
                <Authorized>
                    <FluentNavLink Href="/enterprice/home" Match="NavLinkMatch.All" Icon="@(new Icons.Regular.Size20.BuildingHome())" IconColor="Color.Accent">Enterprice</FluentNavLink>
                    <FluentNavLink Href="workspace" Icon="@(new Icons.Regular.Size20.WindowConsole())" IconColor="Color.Accent">Work Space</FluentNavLink>
                    <FluentNavLink Href="/" Match="NavLinkMatch.All" Icon="@(new Icons.Regular.Size20.Home())" IconColor="Color.Accent">Blog</FluentNavLink>
                    <FluentNavLink Href="settings" Icon="@(new Icons.Regular.Size20.Settings())" IconColor="Color.Accent">Settings</FluentNavLink>
                </Authorized>
                <NotAuthorized>
                    <FluentNavLink Href="/" Match="NavLinkMatch.All" Icon="@(new Icons.Regular.Size20.Home())" IconColor="Color.Accent">Blog</FluentNavLink>
                </NotAuthorized>
            </AuthorizeView>
        </FluentNavMenu>
    </nav>
</div>

@code {
    private bool expanded = true;
    // private string? currentUrl;

    // protected override void OnInitialized()
    // {
    //     currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
    //     NavigationManager.LocationChanged += OnLocationChanged;
    // }

    // private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    // {
    //     currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
    //     StateHasChanged();
    // }

    // public void Dispose()
    // {
    //     NavigationManager.LocationChanged -= OnLocationChanged;
    // }
}
